- hosts: all
  become: true
  become_method: sudo
  gather_facts: true
  force_handlers: true

  pre_tasks:
    - name: check if in chroot
      shell: '[ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]
             && echo true || echo false'
      register: chroot
      changed_when: false
      tags: always

    - name: set chroot_mode
      set_fact: chroot_mode={{ true if chroot.stdout == 'true' else false }}
      tags: always

    - name: verify boot mode
      stat: path=/sys/firmware/efi/efivars
      register: efi
      when: boot_manager is undefined
      tags: grub,systemd-boot,mkinitcpio,dm-crypt

    - name: set boot_manager
      set_fact:
        boot_manager="{{ 'systemd-boot' if efi.stat.exists and
        not boot_encryption.enabled | default(false) else 'grub' }}"
      when: boot_manager is undefined
      tags: grub,systemd-boot,mkinitcpio,dm-crypt

    - name: find graphics hardware
      shell: lspci | grep -e VGA -e 3D
      register: graphics
      changed_when: false
      tags: nvidia

    - name: set gpu drivers to install
      set_fact: >
        nvidia={{ true if graphics.stdout.find('NVIDIA') != -1 else false }}
      when: nvidia is undefined
      tags: nvidia

  roles:
    # Core-installation
    - time-zone
    - locale
    - network
    - root
    - { role: fstab, when: fstab.enabled | default(true) }
    - reflector
    - { role: systemd-boot, when: boot_manager == 'systemd-boot' }
    - { role: grub, when: boot_manager == 'grub' }
    - mkinitcpio
    # Post-installation
    - users
    - systemd-timesyncd
    - pacman
    - networkmanager
    - pulseaudio
    - xorg
    - { role: nvidia, when: nvidia }
    - vulkan
    - gnome
    # Desktop & user preferences
    - { role: yubikey, when: yubikey.enabled | default(false) }
    - openvpn
    - user-packages
    # ansible-makepkg uses env var SUDO_USER when it drops to unprivileged user
    # this breaks when the true ansible_user is root (when running live install)
    - role: aur
      when:
        - ansible_env.SUDO_USER is defined
        - ansible_env.SUDO_USER != 'root'
        - aur.enabled | default(false)
      tags: aur
    - gsettings
    - { role: hidpi, when: hidpi.enabled | default(false) }
    - { role: menu, when: menu.enabled | default(false) }
